// File: app/component/FormFields.js
"use client"
import { useEffect, useState } from "react";
import Validate from "./Validation";

export default function FormFields({field, tag, title, type = "", options = [], required , onChangeValue}) {
    const [error, setError] = useState("")
    
    const handleOnBlur = (event) => {
        const value = event.target.value;
      if (required && !value) {
        setError(`${title} is required`);
      } else {
        setError("");
        setError(Validate(tag, title,value));
      }
    };

    if (field === "input") {
      return (
        <div className="relative">
          <input
            autoComplete="off"
            id={tag}
            type={type}
            className={type === "file" ? "block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-cyan-950 dark:border-gray-600 dark:placeholder-gray-400" : "peer placeholder-transparent h-10 w-full border-b-2 border-gray-300 text-gray-900 dark:bg-cyan-950 dark:text-gray-300 focus:outline-none focus:borer-rose-600"}
            placeholder={title}
            onBlur={handleOnBlur}
            onChange={onChangeValue}
          />
          <label
            htmlFor={tag}
            className="absolute dark:text-gray-300 left-0 -top-3.5 text-gray-600 text-sm peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-440 peer-placeholder-shown:top-2 transition-all peer-focus:-top-3.5 peer-focus:text-gray-600 dark:peer-focus:text-gray-300 peer-focus:text-sm"
          >
            {title}
          </label>
          {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
        </div>
      );
    } else if (field === "select") {
      const optionElements = options.map((option, index) => (
        <option key={index} value={option.value}>{option.title}</option>
      ));
      return (
        <div className="relative">
          <label htmlFor={tag} className="block mb-2 text-sm font-medium text-gray-600 dark:text-gray-300" >Select {title}</label>
          <select
            id={tag}
            onBlur={handleOnBlur}
            placeholder={title}
            onChange={onChangeValue}
            className="border border-gray-300 text-gray-600 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-cyan-950 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-300 dark:focus:ring-blue-500 dark:focus:border-blue-500"
          >
            <option value="">Select Option</option>
            {optionElements}
          </select>
          {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
        </div>
      );
    } else {
      return null;
    }
  };
// File: app/component/Validation.js
import formFields from "../dashboard/addMembers/formFields.json";

export default function Validate(id, title, value=""){
console.log(id);
    if (formFields.validation[id] && value==="") {
        return (`${title} is required`);
    }else if (id === "email") {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
            return (`Invalid ${title}`);
        }
    } else if (id === "fullName" && title === "Full Name") {
        const fullNameRegex = /^[a-zA-Z\s]+$/;
        if (!fullNameRegex.test(value)) {
            return (`Invalid ${title}`);
        }
    } else if (id === "contactNo" && title === "Contact No.") {
        const contactNoRegex = /^\d{10}$/;
        if (!contactNoRegex.test(value)) {
            return (`Invalid ${title}`);
        }
    } else if (id === "enrolledYear" && title === "Enrolled Year") {
        const enrolledYearRegex = /^(19|20)\d{2}$/;
        if (!enrolledYearRegex.test(value)) {
            return (`Invalid ${title}`);
        }
    } else if (id === "dateOfBirth" && title === "Date of Birth") {
        const dobRegex = /^\d{4}-\d{2}-\d{2}$/;
        if (!dobRegex.test(value)) {
            return (`Invalid ${title}`);
        } else {
            // Calculate age from date of birth
            const dob = new Date(value);
            const currentDate = new Date();
            const ageDiff = currentDate.getFullYear() - dob.getFullYear();
            if (ageDiff < 3) {
                return (`Child should be at least 3 years old`);
            }
        }
    } else {
        return;
    }
}
// File: app/component/table.js
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";

export default function Table({ headers, data, actionButtons }) {
  const router = useRouter();
  const [error, setError] = useState("");

  useEffect(() => {
    // You can perform any necessary side effects here
    // For example, fetching data from an API
  }, []);

  return (
    <div className="overflow-x-auto">
    <table className="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
        <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                {headers.map((header, index) => (
                    <th key={index} scope="col" className="px-6 py-3">
                        {header}
                    </th>
                ))}
                {actionButtons && (
                    <th scope="col" className="px-6 py-3">
                        Action
                    </th>
                )}
            </tr>
        </thead>
        <tbody className="max-h-full overflow-y-auto ">
            {data.map((row, rowIndex) => (
                <tr key={rowIndex} className="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                    {row.map((item, columnIndex) => (
                        <td key={columnIndex} className="px-6 py-4">
                            {item}
                        </td>
                    ))}
                    {actionButtons && (
                        <td className="flex items-center px-6 py-4">
                            {actionButtons.map((button, buttonIndex) => (
                                <button key={buttonIndex} onClick={button.onClick} className={`font-medium text-${button.color}-600 dark:text-${button.color}-500 hover:underline mx-3`}>
                                    {button.label}
                                </button>
                            ))}
                        </td>
                    )}
                </tr>
            ))}
        </tbody>
    </table>
    </div>
  );
}

// File: app/dashboard/addMembers/formFields.json
{
    "generalFields": [
        {
            "field": "input",
            "tag": "fullName",
            "title": "Full Name",
            "type": "text",
            "required": true
        },
        {
            "field": "input",
            "tag": "dateOfBirth",
            "title": "Date of Birth",
            "type": "date",
            "required": true
        },
        {
            "field": "input",
            "tag": "address",
            "title": "Address",
            "type": "text",
            "required": true
        },
        {
            "field": "select",
            "tag": "gender",
            "title": "Gender",
            "options": [
                { "value": "Male", "title": "Male" },
                { "value": "Female", "title": "Female" }
            ],
            "required": true
        },
        {
            "field": "input",
            "tag": "contactNo",
            "title": "Contact No.",
            "type": "tel",
            "required": true
        },
        {
            "field": "input",
            "tag": "email",
            "title": "Email",
            "type": "email",
            "required": true
        },
        {
            "field": "input",
            "tag": "photo",
            "title": "Photo",
            "type": "file",
            "required": false
        },
        {
            "field": "select",
            "tag": "bloodGroup",
            "title": "Blood Group",
            "options": [
                { "value": "A+", "title": "A+" },
                { "value": "A-", "title": "A-" },
                { "value": "B+", "title": "B+" },
                { "value": "B-", "title": "B-" },
                { "value": "AB+", "title": "AB+" },
                { "value": "AB-", "title": "AB-" },
                { "value": "O+", "title": "O+" },
                { "value": "O-", "title": "O-" }
            ],
            "required": false
        }
    ],
    "studentFields": [
        {
            "field": "input",
            "tag": "studentId",
            "title": "Student Id",
            "type": "text",
            "required": true
        },
        {
            "field": "input",
            "tag": "program",
            "title": "Program",
            "type": "text",
            "required": true
        },
        {
            "field": "input",
            "tag": "enrolledYear",
            "title": "Enrolled Year",
            "type": "tel",
            "required": true
        }
    ],
    "staffFields": [
        {
            "field": "input",
            "tag": "employeeId",
            "title": "Employee Id",
            "type": "text",
            "required": true
        },
        {
            "field": "input",
            "tag": "department",
            "title": "Department",
            "type": "text",
            "required": true
        },
        {
            "field": "input",
            "tag": "position",
            "title": "Position",
            "type": "text",
            "required": true
        }
    ],
    "validation" :{
        "fullName": true,
        "dateOfBirth": true,
        "address": true,
        "gender": true,
        "contactNo": true,
        "email": true,
        "photo": false,
        "type": true,
        "bloodGroup": false,
        "studentId": true,
        "program": true,
        "enrolledYear": true,
        "employeeId": true,
        "department": true,
        "position": true
    }
}
// File: app/dashboard/addMembers/page.js
"use client";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
const apiDomain = "http://localhost:3002";
import FormFields from "@/app/component/FormFields";
import formFields from "./formFields.json";
import Validate from "@/app/component/Validation";

export default function AddMembers(isVisible, onClose) {
    // if (!isVisible) return null;
  const [error, setError] = useState("");
  const [formData, setFormData] = useState({});
  const [memberType, setMemberType] = useState("");
  const { generalFields, studentFields, staffFields } = formFields;

  function handleFieldChange(tag, title ,value=null) {
    setFormData({ ...formData, [tag]: {value:value, title:title} });
  }

  function handleTypeChange(e) {
    setMemberType(e.target.value);
    setFormData({type: {value:e.target.value, title:"Type"}});
  }

useEffect(()=>{
  setInterval(()=>
  setError(''), 6000)
},[error])

let typeSpecificFields = [];
if (memberType === "Student") {
  typeSpecificFields = studentFields;
} else if (memberType === "Staff") {
  typeSpecificFields = staffFields;
}
const combinedItems = [...generalFields, ...typeSpecificFields];

async function submit(event){
        event.preventDefault();
        let validation

        let updatedFormData = {};
        combinedItems.forEach((field) => {
          const tag = field.tag;
          const title = field.title;
          updatedFormData[tag] = { value: null, title: title };
        });

        for (const field of Object.keys(updatedFormData)) {
          const fieldValue = formData[field] ? formData[field].value : null;
          const validationError = Validate(field, updatedFormData[field].title, fieldValue  );
          if (validationError) {
            setError(validationError);
            return;
          }
        }
        if (!validation) {
            return;
        }

        try {
          const response = fetch(`${apiDomain}/api/addMembers`,{
            method: "POST",
            headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData)
          
          })
          if(response.ok){
            const res = await response.json();
            console.log(res);
          }
        } catch (error) {
          setError(error)
        }
}


  return (
    <div className="min-h-screen bg-gray-100 dark:bg-sky-950 bg-opacity-25 backdrop-blur-sm py-6 flex flex-col justify-center sm:py-12">
      <div className="relative py-3 sm:max-w-xl sm:mx-auto">
        <div className="relative px-4 py-10 bg-white dark:bg-cyan-950 shadow-lg sm:rounded-3xl sm:p-20">
          <div className="max-w-md mx-auto">
            <div>
              <h1 className="text-2xl text-black dark:text-white font-semibold">
                Add Members
              </h1>
            </div>
            <div className="divide-y divide-gray-200">
              <div className="py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7">
                <div key="typeElement-11" className="relative">
                    <label
                      htmlFor="type"
                      className="block mb-2 text-sm font-medium text-gray-600 dark:text-gray-300"
                    >
                      Select Type
                    </label>
                    <select
                      id="type"
                      placeholder="Type"
                      onChange={handleTypeChange}
                      className="border border-gray-300 text-gray-600 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-cyan-950 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-300 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    >
                      <option value="">Select Option</option>
                      <option value="Student">Student</option>
                      <option value="Staff">Staff</option>
                    </select>
                </div>
                {combinedItems.map((field, index) => (
                <FormFields
                  key={index}
                  field={field.field}
                  tag={field.tag}
                  title={field.title}
                  type={field.type}
                  options={field.options}
                  required={field.required}
                  onChangeValue={(e) => handleFieldChange(field.tag, field.title, e.target.value)}
                />
              ))}
                <div className="relative">
                  <button id="submit" onClick={submit} className="bg-cyan-500 hover:bg-cyan-400 dark:hover:bg-cyan-600 text-white dark:bg-cyan-700 rounded-md px-2 py-1">
                    Submit
                  </button>
                </div>
              </div>
            </div>
            {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
          </div>
        </div>
      </div>
    </div>
  );
}

// File: app/dashboard/addTransactions/page.js
"use client";
import { useRouter } from "next/navigation";
import { Fragment, useEffect, useState } from "react";
const apiDomain = "http://localhost:3002";
import Table from "@/app/component/table";
import AddMembers from "../addMembers/page";

export default function Student() {
  const router = useRouter();
  const [error, setError] = useState("");
  const [typeElements, setTypeElements] = useState([]);
  const [isAddMembersPopupOpen, setIsAddMembersPopupOpen] = useState(false);

  function clearError() {
    setInterval(() => {
      setError("");
    }, 6000);
  }

  const headers = [
    "Product name",
    "Color",
    "Category",
    "Accessories",
    "Available",
    "Price",
    "Weight",
  ];
  const data = [
    [
      'Apple MacBook Pro 17"',
      "Silver",
      "Laptop",
      "Yes",
      "Yes",
      "$2999",
      "3.0 lb.",
    ],
    // Add more rows as needed
  ];
  const actionButtons = [
    {
      label: "Edit",
      color: "blue",
      onClick: () => console.log("Edit clicked"),
    },
    {
      label: "Remove",
      color: "red",
      onClick: () => console.log("Remove clicked"),
    },
  ];

  return (
    <Fragment>
      <div className="relative overflow-x-auto shadow-md sm:rounded-lg">
        <div className="pb-4 bg-white flex justify-between items-center dark:bg-gray-900">
          <label htmlFor="table-search" className="sr-only">
            Search
          </label>
          <div className="relative m-2">
            <div className="absolute inset-y-0 rtl:inset-r-0 start-0 flex items-center ps-3 pointer-events-none">
              <svg
                className="w-4 h-4 text-gray-500 dark:text-gray-400"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 20 20"
              >
                <path
                  stroke="currentColor"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
                />
              </svg>
            </div>
            <input
              type="text"
              id="table-search"
              className="block p-3 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Search for items"
            />
          </div>
          <div className="relative left-0">
            <button onClick={()=>{setIsAddMembersPopupOpen(true)}} className="bg-cyan-500 right-0 hover:bg-cyan-400 dark:hover:bg-cyan-600 text-white dark:bg-cyan-700 rounded-md px-2 mr-8 py-1">
              Add
            </button>
          </div>
        </div>
        <Table headers={headers} data={data} actionButtons={actionButtons} />
        {isAddMembersPopupOpen && <AddMembers isVisible={isAddMembersPopupOpen} onClose={setIsAddMembersPopupOpen} />}
      </div>
      
    </Fragment>
  );
}

// File: app/dashboard/page.js

// File: app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

// File: app/layout.js
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "College Management System",
  // description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

// File: app/page.js
'use client'
import { useRouter } from "next/navigation";
import { useState } from "react";
const apiDomain = "http://localhost:3002";

export default function Home() {
  const router = useRouter();
  const [error, setError] = useState("")

  function clearError() {
    setInterval(() => {
      setError("");
    }, 6000);
  }

  async function login() {
    const userName = document.getElementById("userName").value;
    const password = document.getElementById("password").value;
    if (userName === "") {
      setError("User Name or Password Missing!!");
      clearError();
      return;
    }
    if (password === "") {
      setError("User Name or Password Missing!!");
      clearError();
      return;
    }
    try {
      const response = await fetch(`${apiDomain}/api/loginInfo`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userName: userName,
          password: password,
        }),
      });
      const resData = await response.json();
      if (response.ok) {
        setError("");
        localStorage.setItem("userName", userName);
        document.cookie = `Token = ${resData.token}`;
        router.push("/dashboard");
      } else if (response.status === 500) {
        setError(resData.error);
        clearError();
      } else {
        setError("Error, Try again!");
        clearError();
      }
    } catch (error) {
      console.log(error);
      setError(`${error} :: Try again!`);
      clearError();
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-sky-950 py-6 flex flex-col justify-center sm:py-12">
      <div className="relative py-3 sm:max-w-xl sm:mx-auto">
        <div className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-sky-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
        <div className="relative px-4 py-10 bg-white dark:bg-cyan-950 shadow-lg sm:rounded-3xl sm:p-20">
          <div className="max-w-md mx-auto">
            <div>
              <h1 className="text-2xl text-black dark:text-white font-semibold">Login</h1>
            </div>
            <div className="divide-y divide-gray-200">
              <div className="py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7">
                <div className="relative">
                  <input
                    autoComplete="off"
                    id="userName"
                    name="userName"
                    type="text"
                    className="peer placeholder-transparent h-10 w-full border-b-2 border-gray-300 text-gray-900 dark:bg-cyan-950 dark:text-gray-300 focus:outline-none focus:borer-rose-600"
                    placeholder="User Name"
                  />
                  <label
                    htmlFor="userName"
                    className="absolute dark:text-gray-300 left-0 -top-3.5 text-gray-600 text-sm peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-440 peer-placeholder-shown:top-2 transition-all peer-focus:-top-3.5 peer-focus:text-gray-600 dark:peer-focus:text-gray-300 peer-focus:text-sm"
                  >
                    User Name
                  </label>
                </div>
                <div className="relative">
                  <input
                    autoComplete="off"
                    id="password"
                    name="password"
                    type="password"
                    className="peer placeholder-transparent h-10 w-full border-b-2 border-gray-300 text-gray-900 dark:bg-cyan-950 dark:text-gray-300 focus:outline-none focus:borer-rose-600"
                    placeholder="Password"
                  />
                  <label
                    htmlFor="password"
                    className="absolute dark:text-gray-300 left-0 -top-3.5 text-gray-600 text-sm peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-440 peer-placeholder-shown:top-2 transition-all peer-focus:-top-3.5 peer-focus:text-gray-600 dark:peer-focus:text-gray-300 peer-focus:text-sm"
                  >
                    Password
                  </label>
                </div>
                <div className="relative">
                  <button onClick={login} className="bg-cyan-500 hover:bg-cyan-400 dark:hover:bg-cyan-600 text-white dark:bg-cyan-700 rounded-md px-2 py-1">
                    Submit
                  </button>
                </div>
              </div>
            </div>
            <div>{error}</div>
          </div>
        </div>
      </div>
    </div>
  );
}

